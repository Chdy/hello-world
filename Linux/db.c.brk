//
// Created by 邓岩 on 2018/10/26.
//

# include "apue_db.h"
# include "rwlock.h"
# include </Users/dengyan/ClionProjects/Linux/linux.h>

#define IDXLEN_SZ 4 //单个索引记录的长度(字节)
#define SEP ':' //分隔字符
#define SPACE ' ' //空白符
#define NEWLINE '\n' //换行符

#define PTR_SZ 7 //此程序中哈希表不使用指针查找哈希链中的下一个节点，而使用偏移量，PTR_SZ代表偏移量使用7个二进制位表示
#define PTR_MAX 999999 //最大的文件偏移量
#define NHASH_DEF 137 //默认的哈希表大小
#define FREE_OFF 0 //
#define HASH_OFF PTR_SZ //哈希表在索引文件中的偏移量

typedef unsigned long DBHASH;
typedef unsigned long COUNT;

typedef struct {
    int idxfd; //索引文件的描述符
    int datfd; //数据文件的描述符
    char * idxbuf; //为存放索引记录所使用malloc分配的缓冲区
    char * datbuf; //为存放数据记录所使用malloc分配的缓冲区
    char * name; //数据库文件名
    off_t idxoff; //当前索引记录在索引文件中的偏移量，键位于 idxoff + PTR_SZ + IDXLEN_SZ
    size_t idxlen; //当前索引记录的长度
    off_t datoff; //当前数据记录在数据文件中的偏移量
    size_t datlen; //当前数据记录的长度
    off_t ptrval; // 当前索引记录的下一条索引记录的偏移量
    off_t ptroff; // 一个存放着当前节点数据地址的偏移量，可以理解为当前索引数据的上一个索引结构的next域在文件中的偏移量
    //the offset which stored the index record pointer，有时候真觉得中文不如英文表达的清楚
    //可以理解为 int * a = 0x11; a就是ptroff，0x11就是当前索引记录的偏移量，偏移量0x11处放的是ptrval
    off_t chainoff; //散列链表中第一个节点的偏移量
    off_t hashoff; //哈希表在索引文件中的偏移量
    DBHASH nhash; //当前哈希表大小
    COUNT cnt_delok; //删除数据成功次数
    COUNT cnt_delerr; //删除数据错失败次数
    COUNT cnt_fetchok; //获取数据成功次数
    COUNT cnt_fetcherr; //获取数据失败次数
    COUNT cnt_nextrec;
    COUNT cnt_store1; //DB_INSERT，非空，追加
    COUNT cnt_store2; //DB_INSERT，为空，重用
    COUNT cnt_store3; //DB_REPLACE，不同长度，追加
    COUNT cnt_store4; //DB_REPLACE，同长度，覆盖
    COUNT cnt_storerr; //存储错误次数
}DB;

static DB * _db_alloc(int); //分配并初始化数据库结构
static void _db_dodelete(DB *); //删除记录
static int _db_find_and_lock(DB *, const char *, int); //第三个参数非0表示加写锁，否则加读锁
static int _db_findfree(DB *, int, int); //查找索引结构中是否有空闲节点
static void _db_free(DB *); //释放数据库DB结构
static DBHASH _db_hash(DB *, const char *);  //散列函数
static char * _db_readdat(DB *); //读取数据到datbuf缓冲区
static off_t _db_readidx(DB *, off_t); //读取偏移量为offset的索引记录并返回下一条索引记录偏移量
static off_t _db_readptr(DB *, off_t); //读取索引文件偏移量为offset的7个字节，可以理解为返回*offset
static void _db_writedat(DB *, const char *, off_t, int); //写数据到数据文件
static void _db_writeidx(DB *, const char *, off_t, int, off_t); //写索引记录到索引文件，将ptrval作为该新建索引数据的下一节点
static void _db_writeptr(DB *, off_t, off_t); //将ptrval写到索引文件偏移量offset处

DBHANDLE db_open(const char * pathname, int oflag, ...) //如果是创建时，需要同时指定O_CREAT和0_TRUNC，不然数据库不会被初始化
{
    DB * db;
    int len, mode;
    size_t i;
    char asciiptr[PTR_SZ + 1], hash[(NHASH_DEF + 1) * PTR_SZ + 2]; //额外的两个字符用于哈希表和索引记录之间的一个换行符以及hash的的最后一个字符串结束标记
    struct stat statbuff;

    len = strlen(pathname);
    if ((db = _db_alloc(len)) == NULL)
    {
        printf("db_open: _db_alloc error for DB");
        return NULL;
    }
    db->nhash = NHASH_DEF; //哈希表大小
    db->hashoff = HASH_OFF; //哈希表在所以文件中的偏移量
    strcpy(db->name, pathname);
    strcat(db->name, ".idx");
    if (oflag & O_CREAT) { //创建索引文件和数据文件并打开
        va_list ap; //可变参数宏
        va_start(ap, oflag);
        mode = va_arg(ap, int);
        va_end(ap);
        db->idxfd = open(db->name, oflag, mode);
        strcpy(db->name + len, ".dat");
        db->datfd = open(db->name, oflag, mode);
    } else { //打开索引文件和数据文件
        db->idxfd = open(db->name, oflag);
        strcpy(db->name + len, ".dat");
        db->idxfd = open(db->name, oflag);
    }

    if (db->idxfd < 0 || db->datfd < 0) { //打开或者创建失败
        _db_free(db);
        return 0;
    }

    if ((oflag & (O_CREAT | O_TRUNC)) == (O_CREAT | O_TRUNC)) {
        if (writew_lock(db->idxfd, 0, SEEK_SET, 0) < 0) { //第四个参数为0，表示加锁范围为整个文件
            printf("db_open: writew_lock error");
            return 0;
        }

        if (fstat(db->idxfd,&statbuff) < 0) {
            printf("db_open: fstat error");
            return 0;
        }

        if (statbuff.st_size == 0) {
            sprintf(asciiptr, "%*d", PTR_SZ, 0); //等价于sprintf(asciiptr, "%7d" , 0), 用于保存指向下一个空链表的指针值
            hash[0] = 0;
            for (i = 0; i < NHASH_DEF + 1; ++i) {
                strcat(hash, asciiptr); //放置在结构的最前面
            }
            strcat(hash, "\n"); //使用一个换行符哈希表和索引记录分隔
            i = strlen(hash);
            if (write(db->idxfd, hash, i) != i) {
                printf("db_open: index file init write error");
            }
        }

        if (un_lock(db->idxfd, 0, SEEK_SET, 0) < 0) {
            printf("db_open: un_lock error");
            return 0;
        }
    }
    db_rewind(db);
    return db;
}

static DB * _db_alloc(int namelen) //分配并初始化数据库结构
{
    DB * db;
    if ((db = calloc(1, sizeof(DB))) == NULL) { //采用calloc分配，这样结构内的数据全为0
        printf("_db_alloc: calloc error for DB");
        exit(-1);
    }
    db->idxfd = db->datfd = -1;
    if ((db->name = malloc(namelen + 5)) == NULL) {
        printf("_db_alloc: mallloc error for name");
        exit(-1);
    }

    if ((db->idxbuf = malloc(IDXLEN_MAX + 2)) == NULL) {
        printf("_db_alloc: mallloc error for index buffer");
        exit(-1);
    }

    if ((db->datbuf = malloc(DATLEN_MAX + 2)) == NULL) {
        printf("_db_alloc: mallloc error for data buffer");
        exit(-1);
    }

    return db;
}

void db_close(DBHANDLE h) //关闭数据库
{
    _db_free((DB *)h);
}

void _db_free(DB * db) //释放数据库结构，不会对文件有影响
{
    if (db->idxfd >= 0)
        close(db->idxfd);

    if (db->datfd >= 0)
        close(db->datfd);

    if (db->idxbuf != NULL)
        free(db->idxbuf);

    if (db->datbuf != NULL)
        free(db->datbuf);

    free(db);
}

char * db_fetch(DBHANDLE h, const char * key) //查找数据
{
    DB * db = h;
    char * ptr;

    if (_db_find_and_lock(db, key, 0) < 0) { //加读锁
        ptr = NULL;
        db->cnt_fetcherr++;
    } else {
        ptr = _db_readdat(db);
        db->cnt_fetchok++;
    }

    if (un_lock(db->idxfd, db->chainoff, SEEK_SET, 1) < 0) {
        printf("db_fetch: un_lock error");
        exit(-1);
    }

    return ptr;
}

static int _db_find_and_lock(DB * db, const char * key, int writelock) //查找并加锁，无论是否找到都会加锁
{
    off_t offset, nextoffset;

    db->chainoff = (_db_hash(db, key) * PTR_SZ) + db->hashoff; //计算这个键在哈希表的下标值，然后加上存放空指针节点所占用的大小，就能计算此链表指针在索引文件的偏移量
    db->ptroff = db->chainoff; //存放着指向这条索引记录的数据的偏移量 store the offset which stored the index data offset

    if (writelock) { //对该键对应的散列链加写锁
        if (writew_lock(db->idxfd, db->chainoff, SEEK_SET, 1) < 0) {
            printf("_db_find_and_lock: writew_lock error");
            exit(-1);
        }
    } else { //对该键对应的散列链加读锁
        if (readw_lock(db->idxfd, db->chainoff, SEEK_SET, 1) < 0) {
            printf("_db_find_and_lock: read_lock error");
            exit(-1);
        }
    }
    offset = _db_readptr(db, db->ptroff); //读取key对应在哈希表中的第一个指针值，这个指针值指向一条索引记录，如果没有对应的索引记录，则返回0

    while (offset != 0) { //如果不等于0。说明该键对应的散列链表存在，但不表示一定有该键对应的数据
        nextoffset = _db_readidx(db, offset); //读取该散列链表的记录并返回下一条索引记录的偏移量
        if (strcmp(db->idxbuf, key) == 0)
            break;
        db->ptroff = offset; //保存 存放着当前索引记录偏移量的数据 的偏移量
        offset = nextoffset;
    }

    return offset==0?-1:0;
}

static DBHASH _db_hash(DB * db, const char * key) //散列函数
{
    DBHASH hval = 0;
    char c;
    int i;
    for (i = 1; (c = *key++) != 0 ; ++i) { //字符串的哈希值为其单个字符的ascii值乘其位置权值
        hval += c * i;
    }
    return hval % db->nhash; //计算散列值，可以理解为在哈希表中的偏移浪
}

static off_t _db_readptr(DB * db, off_t offset) //读取索引文件偏移量为offset的7个字节，可以理解为返回*offset
{
    char asciiptr[PTR_SZ + 1];

    if (lseek(db->idxfd, offset, SEEK_SET) == -1) {
        printf("_db_readptr: lseek error to field");
        exit(-1);
    }

    if (read(db->idxfd, asciiptr, PTR_SZ) != PTR_SZ) {
        printf("_db_readptr: read error to field");
        exit(-1);
    }

    asciiptr[PTR_SZ] = 0; //以0结尾
    return atoi(asciiptr); //将字符串数字转换为整形数字
}

static off_t _db_readidx(DB * db, off_t offset) //`
{
    ssize_t i;
    char * ptr1, *ptr2;
    char asciiptr[PTR_SZ + 1], asciilen[IDXLEN_SZ + 1];
    struct iovec iov[2];

    if ((db->idxoff = lseek(db->idxfd, offset, offset == 0?SEEK_CUR:SEEK_SET)) == -1) {
        printf("_db_readidx: lseek error");
        exit(-1);
    }

    iov[0].iov_base = asciiptr;
    iov[0].iov_len = PTR_SZ;
    iov[1].iov_base = asciilen;
    iov[1].iov_len = IDXLEN_SZ;
    if ((i = readv(db->idxfd, iov, 2)) != PTR_SZ + IDXLEN_SZ) { //读取索引记录中的两个数据，分别为下一个索引记录的偏移量，以及当前索引记录的长度
        if (i == 0 && offset == 0) //有疑问，难道是读取的文件空洞？
            return -1;
        printf("_db_readidx: readv error of index record");
    }

    asciiptr[PTR_SZ] = 0;
    db->ptrval = atol(asciiptr);
    asciilen[IDXLEN_SZ] = 0;
    if ((db->idxlen = atoi(asciilen)) < IDXLEN_MIN || db->idxlen > IDXLEN_MAX) { //保存索引记录的长度
        printf("_db_readidx: invalid length");
        return -1;
    }

    if ((i = read(db->idxfd, db->idxbuf, db->idxlen)) != db->idxlen) { //此时读取的是索引记录中从键开始的数据，idxbuf指向键开始的整个字符串
        printf("_db_readidx: readerror of index record");
        return -1;
    }

    if (db->idxbuf[db->idxlen - 1] != NEWLINE) { //判断记录是否以换行字符结尾
        printf("_db_readidx: missing newline");
        return -1;
    }

    db->idxbuf[db->idxlen - 1] = 0; //将换行符替换成字符串结束符
    if ((ptr1 = strchr(db->idxbuf, SEP)) == NULL) { //定位到第一个分隔符，该分隔符位于键值的后面
        printf("_db_readidx: missing first separator");
        return -1;
    }
    *ptr1++ = 0; //此行结束后ptr1会指向位于键之后的数据记录的偏移量，而且会使idxbuf指向的字符串仅仅是键值

    if ((ptr2 = strchr(ptr1, SEP)) == NULL) { //定位到第二个分隔符，此分隔符位于数据记录的偏移量之后，
        printf("_db_readidx: missing second separator");
        return -1;
    }
    *ptr2++ = 0; //此行结束后ptr2会指向数据记录的长度

    if (strchr(ptr2, SEP) != NULL) { //如果还有额外的分隔符，那么该索引记录格式错误
        printf("_db_readidx: too many separators");
        return -1;
    }

    if ((db->datoff = atol(ptr1)) < 0) { //将字符串形式的数据记录偏移量转换为整形
        printf("_db_readidx: starting offset");
        return -1;
    }

    if ((db->datlen = atol(ptr2)) < 0 || db->datlen > DATLEN_MAX) { //将字符串形式的数据记录长度转换为整形
        printf("_db_readidx: invalid length");
        return -1;
    }

    return db->ptrval;
}

static char * _db_readdat(DB * db) //读取数据到数据文件的数据到datbuf
{
    if (lseek(db->datfd, db->datoff, SEEK_SET) == -1) { //将对数据文件的偏移量转移到需要访问的数据记录处
        printf("_db_readdat: lseek error");
        return NULL;
    }

    if (read(db->datfd, db->datbuf, db->datlen) != db->datlen) { //读取数据记录
        printf("_db_readdat: read error");
        return NULL;
    }

    if (db->datbuf[db->datlen - 1] != NEWLINE) { //查看数据记录是否以换行符结尾
        printf("_db_readdat: missing newline");
        return NULL;
    }
    db->datbuf[db->datlen - 1] = 0; //将换行符替换为字符串结束符
    return db->datbuf; //返回数据字符串指针
}

int db_delete(DBHANDLE h, const char * key) { //删除记录
    DB * db = h;
    int rc = 0; //假设数据被发现

    if (_db_find_and_lock(db, key ,1) == 0) {
        _db_dodelete(db);
        db->cnt_delok++;
    } else {
        rc = -1; //未找到
        db->cnt_delerr++;
    }

    if (un_lock(db->idxfd, db->chainoff, SEEK_SET ,1) < 0) {
        printf("db_error: un_lock error");
        exit(-1);
    }

    return rc;
}

static void _db_dodelete(DB * db) //此部分代码需要细看
{
    int i;
    char * ptr;
    off_t freeptr, saveptr;

    for (ptr = db->datbuf, i = 0; i < db->datlen - 1; i++)
        *ptr++ = SPACE; //将缓冲区中的数据使用空格覆盖
    *ptr = 0; //将缓冲区数据记录结尾的换行符变为0
    ptr = db->idxbuf;
    while (*ptr)
        *ptr++ = SPACE; //将缓冲区的索引记录使用空格覆盖，由于读取索引数据后处理时已经在缓冲区的键值数据后面写了一个0，所以和上面不同，这里不用再加0了

    if (writew_lock(db->idxfd, FREE_OFF, SEEK_SET, 1) < 0) { //加锁索引文件开头的一个字节
        printf("_db_dodelete: writew_lock error");
        exit(-1);
    }

    _db_writedat(db, db->datbuf, db->datoff, SEEK_SET); //删除数据文件中的数据
    freeptr = _db_readptr(db, FREE_OFF); //找到空链表中第一个可用节点的指针值
    saveptr = db->ptrval; //被删除记录的下一个节点的偏移量
    _db_writeidx(db, db->idxbuf, db->idxoff, SEEK_SET, freeptr); //删除索引文件中的数据，然后将freeptr写到idxoff处
    _db_writeptr(db, FREE_OFF, db->idxoff); //将回收的链表地址(idxoff)写入空链表指针(FREE_OFF)处

    _db_writeptr(db, db->ptroff, saveptr); //将被删除节点的下一个偏移量写到保存被删除节点的偏移量的位置，类似于p->next = p->next->next 这里的p->next就是ptroff，ptr->next->next就是ptrval
    if (un_lock(db->idxfd, FREE_OFF, SEEK_SET, 1) < 0) {
        printf("_db_dodelete: un_lock error");
        exit(-1);
    }
}

static void _db_writedat(DB * db, const char * data, off_t offset, int whence) //写数据到数据文件
{
    struct iovec iov[2];
    static char newline = NEWLINE;

    if (whence == SEEK_END) //如果是在尾部追加写文件则需要加锁
        if (writew_lock(db->datfd, 0, SEEK_SET, 0) < 0) {
            printf("_db_writedat: write_lock error");
            exit(-1);
        }

    // 如果是删除数据，数据文件不需要加锁，因为访问数据文件主要是根据索引文件，即使对数据文件不进行任何操作应该都没有影响
    if ((db->datoff = lseek(db->datfd, offset, whence)) == -1) { //找到数据在数据文件中的偏移处，删除数据时这部应该可以跳过
        printf("_db_writedat: lseek error");
        exit(-1);
    }

    db->datlen = strlen(data) + 1; //增加一个字节用于在尾端追加一个换行符，这部分代码主要是针对添加数据时
    //如果是删除数据时，此时data里面的数据应该全部是空白符
    iov[0].iov_base = (char *)data;
    iov[0].iov_len = db->datlen - 1;
    iov[1].iov_base = &newline; //追加的换行符
    iov[1].iov_len = 1;
    if (writev(db->datfd, iov, 2) != db->datlen) { //聚集写，将数据写入到数据文件中
        printf("_db_writedat: writev error of data record");
        exit(-1);
    }

    if (whence == SEEK_END) //如果刚刚是在尾部追加数据，那么需要进行文件解锁
        if (un_lock(db->datfd, 0, SEEK_SET, 0) < 0) {
            printf("_db_writedat: un_lock error");
            exit(-1);
        }
}

static void _db_writeidx(DB * db, const char * key, off_t offset, int whence, off_t ptrval) //将ptrval作为该新建索引数据的下一节点
{
    struct iovec iov[2];
    char asciiptrlen[PTR_SZ + IDXLEN_SZ + 1];
    int len;

    if ((db->ptrval = ptrval) < 0 || ptrval > PTR_MAX) {
        printf("_db_writeidx: invalid ptr: %d", ptrval);
        exit(-1);
    }

    sprintf(db->idxbuf, "%s%c%lld%c%ld\n", key, SEP, (long long)db->datoff, SEP, db->datlen); //索引记录
    len = strlen(db->idxbuf);
    if (len < IDXLEN_MIN || len > IDXLEN_MAX) {
        printf("_db_writeidx: invalid length");
        exit(-1);
    }
    sprintf(asciiptrlen, "%*lld%*d", PTR_SZ, (long long)ptrval, IDXLEN_SZ, len); //链表指针 + 索引记录 长度，如果是删除数据，那么这里的链表指针就是空链表指针值
    // 后面的操作对于删除索引来说是没有意义的
    if (whence == SEEK_END)
        if (writew_lock(db->idxfd, ((db->nhash + 1) * PTR_SZ) + 1, SEEK_SET, 0) < 0) { //加锁整个索引记录区域，前面的加1是加上空链表指针，后一个1是加上换行符
            printf("_db_writeidx: writew_lock error");
            exit(-1);
        }

    if ((db->idxoff = lseek(db->idxfd, offset, whence)) == -1) {
        printf("_db_writeidx: lseek error");
        exit(-1);
    }

    iov[0].iov_base = asciiptrlen;
    iov[0].iov_len = PTR_SZ + IDXLEN_SZ;
    iov[1].iov_base = db->idxbuf;
    iov[1].iov_len = len;
    if (writev(db->idxfd, iov, 2) != PTR_SZ + IDXLEN_SZ + len) {
        printf("%s\n",strerror(errno));
        printf("_db_writeidx: writev error of index record");
        exit(-1);
    }

    if (whence == SEEK_END)
        if (un_lock(db->idxfd, ((db->nhash) + 1) * PTR_SZ + 1, SEEK_SET, 0) < 0) { //解锁整个索引记录区域
            printf("_db_writeidx: un_lock error");
            exit(-1);
        }
}

static void _db_writeptr(DB * db, off_t offset, off_t ptrval) //将ptrval写到索引文件偏移量offset处
{
    char asciiptr[PTR_SZ + 1];

    if (ptrval < 0 || ptrval > PTR_MAX) {
        printf("_db_writeptr: invalid ptr: %d", ptrval);
        exit(-1);
    }
    sprintf(asciiptr, "%*lld", PTR_SZ, (long long)ptrval);
    if (lseek(db->idxfd, offset, SEEK_SET) == -1) {
        printf("_db_writeptr: lseek error to ptr fielf");
        exit(-1);
    }

    if (write(db->idxfd, asciiptr, PTR_SZ) != PTR_SZ) {
        printf("_db_writeptr: write error to ptr fielf");
        exit(-1);
    }
}

int db_store(DBHANDLE h, const char * key, const char * data, int flag) //存储数据
{
    DB * db = h;
    int rc, keylen, datlen;
    off_t ptrval;

    if (flag != DB_INSERT && flag != DB_REPLACE && flag != DB_STORE) {
        errno = EINVAL;
        return -1;
    }

    keylen = strlen(key);
    datlen = strlen(data) + 1; //+1用于存储结尾的换行符
    if (datlen < DATLEN_MIN || datlen > DATLEN_MAX) {
        printf("db_store: invalid length");
        return -1;
    }

    if (_db_find_and_lock(db, key, 1) < 0) { //记录未找到，那么后面如果指定的是覆盖操作就会出错，而插入和存储操作就继续进行
        if (flag == DB_REPLACE) {
            rc = -1;
            db->cnt_storerr++; //存储错误次数加一
            errno = ENOENT;
            goto doreturn;
        }
        ptrval = _db_readptr(db, db->chainoff); //散列链中第一个节点的偏移量，

        if (_db_findfree(db, keylen, datlen) < 0) { //如果当前文件中没有足够大的空间存放该记录，那么将该记录追加到尾端
            _db_writedat(db, data, 0, SEEK_END);
            _db_writeidx(db, key, 0, SEEK_END, ptrval); //将散列链开始的第一个节点偏移量写到新键的索引记录的next域中
            _db_writeptr(db, db->chainoff, db->idxoff); //将当前索引记录的偏移量写到散列表
            db->cnt_store1++; //无空间存储成功次数加一
        } else { //如果文件有空间存放记录
            _db_writedat(db, data, db->datoff, SEEK_SET);
            _db_writeidx(db, key, db->idxoff, SEEK_SET, ptrval); //将散列链开始的第一个节点偏移量写到新键的索引记录的next域中
            _db_writeptr(db, db->chainoff, db->idxoff); //将当前索引记录的偏移量写到散列表
            db->cnt_store2++; //有空间存储成功次数加一
        }
    } else { //记录找到
        if (flag == DB_INSERT) { //如果指定的是插入操作那就什么都不做
            rc = 1;
            db->cnt_storerr++;
            goto doreturn;
        }

        //替换掉已经存在的数据
        if (datlen != db->datlen) { //如果更新的数据与被覆盖的数据大小不等
            _db_dodelete(db); //删除已存在的记录
            ptrval = _db_readptr(db, db->chainoff); //保存散列链的第一个值
            _db_writedat(db, data, 0, SEEK_END);
            _db_writeidx(db, key, 0, SEEK_END, ptrval); //将散列链的第一个值作为插入节点的下一个节点
            _db_writeptr(db, db->chainoff, db->idxoff); //将插入的索引记录的偏移量写入到散列表
            db->cnt_store3++; //替换并删除原本数据以及追加数据成功次数加一
        } else {
            _db_writedat(db, data, db->datoff, SEEK_SET); //如果大小足够，则直接覆盖数据
            db->cnt_store4++;
        }
    }
    rc = 0;

    doreturn:
    if (un_lock(db->idxfd, db->chainoff, SEEK_SET, 1) < 0) { //无论成功还是失败都需要解除由_db_find_and_lock加的锁
        printf("db_store: un_lock error");
        exit(-1);
    }
    return rc;
}

static int _db_findfree(DB * db, int keylen, int datlen) //查找一个空闲且够大的索引文件空间
{
    int rc;
    off_t offset, nextoffset, saveoffset;

    if (writew_lock(db->idxfd, FREE_OFF, SEEK_SET, 1) < 0) {
        printf("_db_findfree: writew_lock error");
        exit(-1);
    }
    saveoffset = FREE_OFF;
    offset = _db_readptr(db, saveoffset);

    while (offset != 0) {
        nextoffset = _db_readidx(db, offset);
        if (strlen(db->idxbuf) == keylen && db->datlen == datlen)
            break;
        saveoffset = offset;
        offset = nextoffset;
    }

    if (offset == 0) {
        rc = -1;
    } else {
        _db_writeptr(db, saveoffset, db->ptrval); //将满足条件的节点的下一个节点的偏移量写到满足条件的节点的上一个节点的next域
        rc = 0;
    }

    if (un_lock(db->idxfd, FREE_OFF, SEEK_SET, 1) < 0) {
        printf("_db_findfree: unlock error");
        exit(-1);
    }
    return rc;
}

void db_rewind(DBHANDLE h)
{
    DB * db = h;
    off_t offset;

    offset = (db->nhash + 1) * PTR_SZ;
    if ((db->idxoff = lseek(db->idxfd, offset + 1, SEEK_SET)) == -1) {
        printf("db_rewind: lseek error");
    }
}

char * db_nextrec(DBHANDLE h, char * key)
{
    DB * db = h;
    char c;
    char * ptr;

    if (readw_lock(db->idxfd, FREE_OFF, SEEK_SET, 1) < 0) {
        printf("db_nextrec: readw_lock error");
        exit(-1);
    }

    do {
        if (_db_readidx(db, 0) < 0) {
            ptr = NULL;
            goto doreturn;
        }
        ptr = db->idxbuf;
        while ((c = *ptr++) != 0 && c==SPACE);
    } while (c == 0);

    if (key != NULL) //这里的key是一个缓冲区的指针
        strcpy(key, db->idxbuf);
    ptr = _db_readdat(db);
    db->cnt_nextrec++;
    doreturn:
    if (un_lock(db->idxfd, FREE_OFF, SEEK_SET, 1) < 0) { //无论成功还是失败都需要解除由_db_find_and_lock加的锁
        printf("db_nextrec: un_lock error");
        exit(-1);
    }
    return ptr;
}

int main(void)
{
    //DBHANDLE db = db_open("/Users/dengyan/db", O_CREAT|O_RDWR, 0644);
    DBHANDLE db = db_open("/Users/dengyan/db", O_CREAT|O_RDWR, 0644);
    //db_store(db, "yuanling", "123456", DB_INSERT);
    //db_delete(db, "dengyan");
    //db_store(db, "dengyan", "fhgjhdjm00", DB_INSERT);
    char * ptr;
    char key[1024];
    db_rewind(db);
    while ((ptr = db_nextrec(db, key)) != NULL) {
        printf("%s %s\n", key, ptr);
    }
    return 0;
}